# Problem 1

l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print (','.join(l))
#--------------------------------------------------------#

# Problem 2
def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x = int(input("Enter Number: "))
print (fact(x))
#--------------------------------------------------------#

# Problem 3

n=int(input("Enter number: "))
d=dict()
for i in range(1,n+1):
    d[i]=i*i

print (d)

#--------------------------------------------------------#

# Problem 4

values=input("Enter numbers: ")
l = values.split(",")
t = tuple(l)
print (l)
print (t)

#--------------------------------------------------------#

# Problem 5

class InputOutString(object):
    def __init__(self):
        self.s = ""

    def getString(self):
        self.s = input()

    def printString(self):
        print (self.s.upper())

strObj = InputOutString()
strObj.getString()
strObj.printString()

#--------------------------------------------------------#

# Problem 6

import math

c = 50
h = 30
result = []

n = input("Enter values of d: ")
values = n.split(",")

for d in values:
    result.append(str(int(round(math.sqrt(2*c*float(d)/h)))))

print(",".join(result))


#--------------------------------------------------------#

# Problem 7

input_str = input()
dimensions=[int(x) for x in input_str.split(',')]
rowNum=dimensions[0]
colNum=dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]

for row in range(rowNum):
    for col in range(colNum):
        multilist[row][col]= row*col

print (multilist)


#--------------------------------------------------------#

# Problem 8

items=[x for x in input().split(',')]
items.sort()
print (','.join(items))

#--------------------------------------------------------#

# Problem 9

lines = []
while True:
    s = input()
    if s:
        lines.append(s.upper())
    else:
        break;

for i in lines:
    print (i)
    
#--------------------------------------------------------#

# Problem 10

s = input()
words = [word for word in s.split(" ")]
print (" ".join(sorted(list(set(words)))))

#--------------------------------------------------------#

# Problem 11 

value = []
items=[x for x in input().split(',')]
for p in items:
    intp = int(p, 2)
    if not intp%5:
        value.append(p)

print (','.join(value))

#--------------------------------------------------------#

# Problem 12

values = []

for i in range(1000, 3001):
    
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
        values.append(s)

print (",".join(values))

#--------------------------------------------------------#

# Problem 13

s = input()
d={"DIGITS":0, "LETTERS":0}
for c in s:
    if c.isdigit():
        d["DIGITS"]+=1
    elif c.isalpha():
        d["LETTERS"]+=1
    else:
        pass
print ("LETTERS", d["LETTERS"])
print ("DIGITS", d["DIGITS"])

#--------------------------------------------------------#

# Problem 14

s = input()
d={"UPPER CASE":0, "LOWER CASE":0}
for c in s:
    if c.isupper():
        d["UPPER CASE"]+=1
    elif c.islower():
        d["LOWER CASE"]+=1
    else:
        pass
print ("UPPER CASE", d["UPPER CASE"])
print ("LOWER CASE", d["LOWER CASE"])

#--------------------------------------------------------#

# Prblem 15

a = input()
n1 = int( "%s" % a )
n2 = int( "%s%s" % (a,a) )
n3 = int( "%s%s%s" % (a,a,a) )
n4 = int( "%s%s%s%s" % (a,a,a,a) )
print (n1+n2+n3+n4)

#--------------------------------------------------------#


# Problem 16

values = input()
numbers = [
x for x in values.split(",") 
if int(x)%2!=0
]
print (",".join(numbers))


#--------------------------------------------------------#


# Problem 17

netAmount = 0
while True:
    s = input()

    if not s:
        break

    values = s.split(" ")
    operation = values[0]
    amount = int(values[1])

    if operation=="D":
        netAmount+=amount

    elif operation=="W":
        netAmount-=amount
        
    else:
        pass
print (netAmount)

#--------------------------------------------------------#


# Problem 18

import re
value = []
items =[x for x in input().split(',')]
for p in items:
    if len(p)<6 or len(p)>12:
        continue

    else:
        pass

    if not re.search("[a-z]",p):
        continue

    elif not re.search("[0-9]",p):
        continue

    elif not re.search("[A-Z]",p):
        continue

    elif not re.search("[$#@]",p):
        continue

    elif re.search("\s",p):
        continue

    else:
        pass
    value.append(p)

print (",".join(value))

#--------------------------------------------------------#


# Problem 19

from operator import itemgetter, attrgetter

l = []
while True:
    s = input()
    if not s:
        break
    
    l.append(tuple(s.split(",")))

print (sorted(l, key=itemgetter(0,1,2)))

#--------------------------------------------------------#


# Problem 20

def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j

for i in putNumbers(100):
    print (i)

#--------------------------------------------------------#


# Problem 21

import math
pos = [0,0]
while True:
    s = input()
    if not s:
        break

    movement = s.split(" ")
    direction = movement[0]
    steps = int(movement[1])

    if direction=="UP":
        pos[0]+=steps

    elif direction=="DOWN":
        pos[0]-=steps
        
    elif direction=="LEFT":
        pos[1]-=steps

    elif direction=="RIGHT":
        pos[1]+=steps

    else:
        pass

print (int(round(math.sqrt(pos[1]**2+pos[0]**2))))


#--------------------------------------------------------#


# Problem 22

freq = {}
line = input()
for word in line.split():
    freq[word] = freq.get(word,0)+1

words = freq.keys()
sorted(words)

for w in words:
    print ("%s:%d" % (w,freq[w]))


#--------------------------------------------------------#


# Problem 23

def square(num):
    return num ** 2

print (square(2))
print (square(3))


#--------------------------------------------------------#


# Problem 24

print (abs.__doc__)
print (int.__doc__)
print (input.__doc__)

def square(num):
    '''Return the square value of the input number.
    
    The input number must be integer.
    '''
    return num ** 2

print (square(2))
print (square.__doc__)


#--------------------------------------------------------#


# Problem 25

class Person:
    # Define the class parameter "name"
    name = "Person"
    
    def __init__(self, name = None):
        # self.name is the instance parameter
        self.name = name

jeffrey = Person("Jeffrey")
print ("%s name is %s" % (Person.name, jeffrey.name))

nico = Person()
nico.name = "Nico"
print ("%s name is %s" % (Person.name, nico.name))



#--------------------------------------------------------#


# Problem 26

def SumFunction(number1, number2):
	return number1+number2

print (SumFunction(1,2))


#--------------------------------------------------------#


# Problem 27

def printValue(n):
	print (int(n))

printValue(3)


#--------------------------------------------------------#


# Problem 28

def printValue(n):
	print (str(n))

printValue(3)


#--------------------------------------------------------#


# Problem 29

def printValue(s1,s2):
	print (int(s1)+int(s2))

printValue("3","4") 


#--------------------------------------------------------#


# Problem 30

def printValue(s1,s2):
	print (s1+s2)

printValue("3","4")


#--------------------------------------------------------#


# Problem 31

def printValue(s1,s2):
	len1 = len(s1)
	len2 = len(s2)

	if len1>len2:
		print (s1)

	elif len2>len1:
		print (s2)

	else:
		print (s1)
		print (s2)
		
printValue("one","three")

#--------------------------------------------------------#


# Problem 32

def checkValue(n):
	if n%2 == 0:
		print ("It is an even number")
	else:
		print ("It is an odd number")
		
checkValue(7)


#--------------------------------------------------------#


# Problem 33

def printDict():
	d=dict()
	d[1]=1
	d[2]=2**2
	d[3]=3**2
	print (d)
		
printDict()

#--------------------------------------------------------#

 # Problem 34

def printDict():
	d = dict()
	for i in range(1,21):
		d[i]=i**2
	print (d)
		
printDict()

#--------------------------------------------------------#


# Problem 35

def printDict():
	d = dict()
	for i in range(1,21):
		d[i]=i**2
	for (k,v) in d.items():	
		print (v)
		
printDict()

#--------------------------------------------------------#

 # Problem #36

def printDict():
	d = dict()
	for i in range(1,21):
		d[i]=i**2

	for k in d.keys():	
		print (k)
		
printDict()

#--------------------------------------------------------#

# Problem 37

def printList():
	l=list()
	for i in range(1,21):
		l.append(i**2)
	print (l)
		
printList()

#--------------------------------------------------------#

# Problem 38


def printList():
	l=list()
	for i in range(1,21):
		l.append(i**2)
	print (l[:5])
		

printList()

#--------------------------------------------------------#


# Problem 39

def printList():
	l=list()
	for i in range(1,21):
		l.append(i**2)
	print (l[-5:])
		
printList()

#--------------------------------------------------------#


# Problem 40

def printList():
	l=list()
	for i in range(1,21):
		l.append(i**2)
	print (l[5:])
		

printList()

#--------------------------------------------------------#

# Problem 41

def printTuple():
	l=list()
	for i in range(1,21):
		l.append(i**2)
	print (tuple(l))
		
printTuple()

#--------------------------------------------------------#


# Problem 42

tp = (1,2,3,4,5,6,7,8,9,10)
tp1 = tp[:5]
tp2 = tp[5:]
print (tp1)
print (tp2)

#--------------------------------------------------------#

# Problem 43

tp=(1,2,3,4,5,6,7,8,9,10)
li=list()
for i in range (len(tp)):
	if tp[i]%2==0:
		li.append(tp[i])

tp2=tuple(li)
print (tp2)

#--------------------------------------------------------#


# Problem 44

s= input()

if s=="yes" or s=="YES" or s=="Yes":
    print "Yes"

else:
    print "No"

#--------------------------------------------------------#


# Problem 45

l = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = filter(lambda x: x%2==0, l)
print (list(evenNumbers))

#--------------------------------------------------------#


# Problem 46

l = [1,2,3,4,5,6,7,8,9,10]
squaredNumbers = map(lambda x: x**2, l)
print (list(squaredNumbers))

--------------------------------------------------------#

# Problem 47

l = [1,2,3,4,5,6,7,8,9,10]
evenSqrNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, l))
print (list(evenSqrNumbers))

--------------------------------------------------------#

# Problem 48

evenNumbers = filter(lambda x: x%2==0, range(1,21))
print (list(evenNumbers))

#--------------------------------------------------------#

# Problem 49

squaredNumbers = map(lambda x: x**2, range(1,21))
print (list(squaredNumbers))

#--------------------------------------------------------#

# Problem 50

class American(object):
    @staticmethod
    def printNationality():
        print ("America")

anAmerican = American()
anAmerican.printNationality()
American.printNationality()

#--------------------------------------------------------#

# Problem 51

class American(object):
    def __repr__(self):
         return "American()"
    
   

class NewYorker(American):
    def __repr__(self):
         return "NewYorker()"
    

anAmerican = American()
aNewYorker = NewYorker()

print (anAmerican)
print (aNewYorker)


#--------------------------------------------------------#

# Problem 52

class Circle(object):
    def __init__(self, r):
        self.radius = r

    def area(self):
        return self.radius**2*3.14

aCircle = Circle(2)
print (aCircle.area())

#--------------------------------------------------------#

# Problem 53

class Rectangle(object):
    def __init__(self, l, w):
        self.length = l
        self.width  = w

    def area(self):
        return self.length*self.width

aRectangle = Rectangle(2,10)
print (aRectangle.area())

#--------------------------------------------------------#

# Problem 54

class Shape(object):
    def __init__(self):
        pass

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, l):
        Shape.__init__(self)
        self.length = l

    def area(self):
        return self.length*self.length

aSquare= Square(3)
print (aSquare.area())

#--------------------------------------------------------#

# Problem 55

raise RuntimeError('something wrong')


#--------------------------------------------------------#

# Prblem 56

def throws():
    return 5/0

try:
    throws()
except ZeroDivisionError:
    print ("division by zero!")
except (Exception,err):
    print ('Caught an exception')
finally:
    print ('In finally block for cleanup')
    

#--------------------------------------------------------#

# Problem 57

class MyError(Exception):
    """My own exception class

    Attributes:
        msg  -- explanation of the error
    """

    def __init__(self, msg):
        self.msg = msg

error = MyError("something wrong")
print (error)

#--------------------------------------------------------#

# Problem 58

import re
emailAddress = input()
pat2 = "(\w+)@((\w+\.)+(com))"
r2 = re.match(pat2,emailAddress)
print (r2.group(1))

#--------------------------------------------------------#

# Problem 59

import re
emailAddress = input()
pat2 = "(\w+)@(\w+)\.(com)"
r2 = re.match(pat2,emailAddress)
print (r2.group(2))


#--------------------------------------------------------#

# Problem 60

import re
s = input()
print (re.findall("\d+",s))

#--------------------------------------------------------#

# Problem 61

unicodeString = u'hello world!'
print (unicodeString)


#--------------------------------------------------------#


# Problem 62 

s = input()
u = str(s) 		#Python 3 renamed the unicode type to str
print (u)  

#--------------------------------------------------------#

# Problem 63

# -*- coding: utf-8 -*-

#--------------------------------------------------------#


# Problem 64

n=int(input())
sum = 0.0
for i in range(1,n+1):
    sum += float(float(i)/(i+1))
print (sum)

#--------------------------------------------------------#

# Problem 65

def f(n):
    if n==0:
        return 0
    else:
        return f(n-1)+100

n=int(input())
print (f(n))


#--------------------------------------------------------#

# Problem 66

def f(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)

n=int(input())
print (f(n))

#--------------------------------------------------------#


# Problem 67

def f(n):
    if n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        return f(n-1)+f(n-2)

n=int(input())
values = [str(f(x)) for x in range(0, n+1)]
print (",".join(values))

#--------------------------------------------------------#
# Problem 68

def EvenGenerator(n):
    i=0
    while i<=n:
        if i%2==0:
            yield i
        i+=1


n=int(input())
values = []
for i in EvenGenerator(n):
    values.append(str(i))

print (",".join(values))


#--------------------------------------------------------#

# Problem 69

def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i

n=int(input())
values = []
for i in NumGenerator(n):
    values.append(str(i))

print (",".join(values))

#--------------------------------------------------------#

# Problem 70

l = [2,4,6,9]
for i in l:
    assert i%2==0,"All numbers are not even" 
    
    
#--------------------------------------------------------#

# Problem 71

expression = input()
print (eval(expression))

#--------------------------------------------------------#

# Problem 72

import math
def bin_search(l, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if l[mid]==element:
            index = mid
        elif l[mid]>element:
            top = mid-1
        else:
            bottom = mid+1

    return index

l=[2,5,7,9,11,17,222]
print (bin_search(l,11))
print (bin_search(l,12))


#--------------------------------------------------------#


# Problem 73

import math
def bin_search(l, element):
    bottom = 0
    top = len(l)-1
    index = -1
    while top>=bottom and index==-1:

        mid = int(math.floor((top+bottom)/2.0))
        if l[mid]==element:
            index = mid

        elif l[mid]>element:
            top = mid-1

        else:
            bottom = mid+1

    return index

l=[2,5,7,9,11,17,222]
print (bin_search(l,11))
print (bin_search(l,12))

#--------------------------------------------------------#

# Problem 74

import random
print (random.random()*100)


#--------------------------------------------------------#

# Problem 75

import random
print (random.random()*100-5)

#--------------------------------------------------------#

# Problem 76

import random
print (random.choice([i for i in range(11) if i%2==0]))

#--------------------------------------------------------#

# Problem 77

import random
print (random.choice([i for i in range(201) if i%5==0 and i%7==0]))


#--------------------------------------------------------#


# Problem 78

import random
print (random.sample(range(100), 5))

#--------------------------------------------------------#


# Problem 79

import random
print (random.sample([i for i in range(100,201) if i%2==0], 5))

#--------------------------------------------------------#

# Problem 80

import random
print (random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5))

#--------------------------------------------------------#

#Problem 81

import random
print (random.randrange(7,16))


#--------------------------------------------------------#

# Problem 82

import zlib
s = 'hello world!hello world!hello world!hello world!.'.encode()
t = zlib.compress(s)
print (t)
print (zlib.decompress(t))

#--------------------------------------------------------#

# Problem 83

from timeit import Timer
t = Timer("for i in range(100):1+1")
print (t.timeit())


#--------------------------------------------------------#

# Problem 84

from random import shuffle
l = [3,6,7,8]
shuffle(l)
print (l)


#--------------------------------------------------------#


# Problem 85

subjects=["I", "You"]
verbs=["Play", "Love"]
objects=["Hockey","Football"]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = "%s %s %s." % (subjects[i], verbs[j], objects[k])
            print (sentence)



#--------------------------------------------------------#


# Problem 86

l = [5,6,77,45,22,12,24]
l = [x for x in l 
        if x%2!=0 ]
print (l)

#--------------------------------------------------------#

# Problem 87

l = [12,24,35,70,88,120,155]
l = [x for x in l 
        if x%5!=0 and x%7!=0]
print (l)


#--------------------------------------------------------#


# Problem 88

l = [12,24,35,70,88,120,155]
l = [x for (i,x) in enumerate(l) 
        if i%2!=0]
print (l)


#--------------------------------------------------------#


# Problem 89

array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]
print (array)


#--------------------------------------------------------#

# Problem 90

l = [12,24,35,70,88,120,155]
l = [x for (i,x) in enumerate(l) 
        if i not in (0,4,5)]
print (l)


#--------------------------------------------------------#


# Problem 91

l = [12,24,35,24,88,120,155]
l = [x for x in l 
            if x!=24]
print (l)


#--------------------------------------------------------#

# Problem 92

set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
l=list(set1)
print (l)


#--------------------------------------------------------#


#Problem 93

def removeDuplicate( l ):
    newl=[]
    seen = set()
    for item in l:
        if item not in seen:
            seen.add( item )
            newl.append(item)

    return newl

l=[12,24,35,24,88,120,155,88,120,155]
print (removeDuplicate(l))



#--------------------------------------------------------#


# Problem 94

class Person(object):
    def getGender( self ):
        return "Unknown"

class Male( Person ):
    def getGender( self ):
        return "Male"

class Female( Person ):
    def getGender( self ):
        return "Female"

aMale = Male()
aFemale= Female()
print (aMale.getGender())


#--------------------------------------------------------#

# Problem 95

dic = {}
s=input()
for s in s:
    dic[s] = dic.get(s,0)+1
    
print ('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))


#--------------------------------------------------------#


# Problem 96

s=input()
s = s[::-1]

print (s)


#--------------------------------------------------------#

# Problem 97

s= input()
s = s[::2]
print (s)


#--------------------------------------------------------#

# Problem 98

import itertools
print (list(itertools.permutations([1,2,3])))


#--------------------------------------------------------#

# Problem 99

def solve(numheads,numlegs):
    ns='No solutions!'
    for i in range(numheads+1):
        j=numheads-i
        if 2*i+4*j==numlegs:
            return i,j
    return ns,ns

numheads=35
numlegs=94
solutions=solve(numheads,numlegs)
print (solutions)


#--------------------------------------------------------#



# Problem 100
# There was a copy of a question so there is only 99 of them.
















